/*
 * Copyright 2025 Graham Kirby:
 * <https://github.com/grahamkirby/race-timing>
 *
 * This file is part of the module race-timing.
 *
 * race-timing is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * race-timing is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with race-timing. If not, see
 * <http://www.gnu.org/licenses/>.
 */
package org.grahamkirby.race_timing;

import org.grahamkirby.race_timing.relay_race.RelayRace;
import org.junit.jupiter.api.Test;

import static org.grahamkirby.race_timing.relay_race.RelayRace.KEY_MASS_START_ELAPSED_TIMES;
import static org.grahamkirby.race_timing.single_race.SingleRace.*;

public class RelayRaceTest extends RaceTest {

    // TODO test duplicate bib number in individual raw results.
    // TODO test missing property in config file.

    // Synthetic names for most tests generated by:
    // https://www.fakenamegenerator.com/gen-random-gd-uk.php

    @Override
    protected void invokeMain(final String[] args) throws Exception {
        RelayRace.main(args);
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////

    @Test
    void simple() throws Exception {
        testExpectedCompletion("relay_race/simple");
    }

    @Test
    void legs3() throws Exception {
        testExpectedCompletion("relay_race/legs_3");
    }

    @Test
    void legs5() throws Exception {
        testExpectedCompletion("relay_race/legs_5");
    }

    @Test
    void topTwoResultsWomen() throws Exception {
        testExpectedCompletion("relay_race/top_two_results_women");
    }

    @Test
    void deadHeats() throws Exception {
        testExpectedCompletion("relay_race/dead_heats");
    }

    @Test
    void htmlOutput() throws Exception {
        testExpectedCompletion("relay_race/html_output");
    }

    @Test
    void startOffset() throws Exception {
        testExpectedCompletion("relay_race/start_offset");
    }

    @Test
    void interpolatedRawTimes() throws Exception {
        testExpectedCompletion("relay_race/interpolated_raw_times");
    }

    @Test
    void guessedMissingBibNumbersA() throws Exception {
        testExpectedCompletion("relay_race/guessed_missing_bib_numbers_a");
    }

    @Test
    void guessedMissingBibNumbersB() throws Exception {
        testExpectedCompletion("relay_race/guessed_missing_bib_numbers_b");
    }

    @Test
    void lastFewResultsNotRecorded() throws Exception {
        testExpectedCompletion("relay_race/last_few_results_not_recorded");
    }

    @Test
    void massStartNoneDNFLeg1() throws Exception {
        testExpectedCompletion("relay_race/mass_start_none/dnf_leg_1");
    }

    @Test
    void massStartNoneDNFLeg1And2And3() throws Exception {
        testExpectedCompletion("relay_race/mass_start_none/dnf_leg_1_2_3");
    }

    @Test
    void massStartNoneDNFButCompleted() throws Exception {
        testExpectedCompletion("relay_race/mass_start_none/dnf_leg_1_2_3_4a");
    }

    @Test
    void massStartNoneDNFNotCompleted() throws Exception {
        testExpectedCompletion("relay_race/mass_start_none/dnf_leg_1_2_3_4b");
    }

    @Test
    void massStartNoneDNFLeg2() throws Exception {
        testExpectedCompletion("relay_race/mass_start_none/dnf_leg_2");
    }

    @Test
    void massStartNoneDNFLeg3() throws Exception {
        testExpectedCompletion("relay_race/mass_start_none/dnf_leg_3");
    }

    @Test
    void massStartNoneDNFLeg4() throws Exception {
        testExpectedCompletion("relay_race/mass_start_none/dnf_leg_4");
    }

    @Test
    void massStartNoneDNFLeg3And4NotCompleted() throws Exception {
        testExpectedCompletion("relay_race/mass_start_none/dnf_leg_3_4a");
    }

    @Test
    void massStartNoneDNFLeg3And4ButCompleted() throws Exception {
        testExpectedCompletion("relay_race/mass_start_none/dnf_leg_3_4b");
    }

    @Test
    void massStart34AllCompleted() throws Exception {
        testExpectedCompletion("relay_race/mass_start_3_4/all_completed");
    }

    @Test
    void massStart34DNFLeg1() throws Exception {
        testExpectedCompletion("relay_race/mass_start_3_4/dnf_leg_1");
    }

    @Test
    void massStart34DNFLeg1And2And3() throws Exception {
        testExpectedCompletion("relay_race/mass_start_3_4/dnf_leg_1_2_3");
    }

    @Test
    void massStart34DNFButCompleted() throws Exception {
        testExpectedCompletion("relay_race/mass_start_3_4/dnf_leg_1_2_3_4a");
    }

    @Test
    void massStart34DNFNotCompleted() throws Exception {
        testExpectedCompletion("relay_race/mass_start_3_4/dnf_leg_1_2_3_4b");
    }

    @Test
    void massStart34DNFLeg2() throws Exception {
        testExpectedCompletion("relay_race/mass_start_3_4/dnf_leg_2");
    }

    @Test
    void massStart34DNFLeg3() throws Exception {
        testExpectedCompletion("relay_race/mass_start_3_4/dnf_leg_3");
    }

    @Test
    void massStart34DNFLeg3And4NoFinishes() throws Exception {
        testExpectedCompletion("relay_race/mass_start_3_4/dnf_leg_3_4a");
    }

    @Test
    void massStart34DNFLeg3And4ButCompleted() throws Exception {
        testExpectedCompletion("relay_race/mass_start_3_4/dnf_leg_3_4b");
    }

    @Test
    void massStart34DNFLeg4() throws Exception {
        testExpectedCompletion("relay_race/mass_start_3_4/dnf_leg_4");
    }

    @Test
    void massStart34FirstLegFinishAfterMassStart3() throws Exception {
        testExpectedCompletion("relay_race/mass_start_3_4/first_leg_finish_after_mass_start_3");
    }

    @Test
    void massStart34FirstLegFinishAfterMassStart4() throws Exception {
        testExpectedCompletion("relay_race/mass_start_3_4/first_leg_finish_after_mass_start_4");
    }

    @Test
    void massStart4AllCompleted() throws Exception {
        testExpectedCompletion("relay_race/mass_start_4/all_completed");
    }

    @Test
    void massStart4LegsSwapped() throws Exception {
        testExpectedCompletion("relay_race/mass_start_4/legs_swapped");
    }

    @Test
    void massStart4DNFLeg1() throws Exception {
        testExpectedCompletion("relay_race/mass_start_4/dnf_leg_1");
    }

    @Test
    void massStart4DNFLeg1And2And3() throws Exception {
        testExpectedCompletion("relay_race/mass_start_4/dnf_leg_1_2_3");
    }

    @Test
    void massStart4DNFButCompleted() throws Exception {
        testExpectedCompletion("relay_race/mass_start_4/dnf_leg_1_2_3_4a");
    }

    @Test
    void massStart4DNFNotCompleted() throws Exception {
        testExpectedCompletion("relay_race/mass_start_4/dnf_leg_1_2_3_4b");
    }

    @Test
    void massStart4DNFLeg2() throws Exception {
        testExpectedCompletion("relay_race/mass_start_4/dnf_leg_2");
    }

    @Test
    void massStart4DNFLeg3() throws Exception {
        testExpectedCompletion("relay_race/mass_start_4/dnf_leg_3");
    }

    @Test
    void massStart4DNFLeg3And4NoFinishes() throws Exception {
        testExpectedCompletion("relay_race/mass_start_4/dnf_leg_3_4a");
    }

    @Test
    void massStart4DNFLeg3And4ButCompleted() throws Exception {
        testExpectedCompletion("relay_race/mass_start_4/dnf_leg_3_4b");
    }

    @Test
    void massStart4DNFLeg4() throws Exception {
        testExpectedCompletion("relay_race/mass_start_4/dnf_leg_4");
    }

    @Test
    void individualRunnerStartTimeLeg1() throws Exception {
        testExpectedCompletion("relay_race/individual_runner_start_time/leg_1");
    }

    @Test
    void individualRunnerStartTimeLeg3() throws Exception {
        testExpectedCompletion("relay_race/individual_runner_start_time/leg_3");
    }

    @Test
    void alternativePrizeReportingOrder() throws Exception {
        testExpectedCompletion("relay_race/alternative_prize_reporting_order");
    }

    @Test
    void prizeCategoryGroups() throws Exception {
        testExpectedCompletion("relay_race/prize_category_groups");
    }

    @Test
    void teamNameIncludesComma() throws Exception {
        testExpectedCompletion("relay_race/team_name_includes_comma");
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////

    @Test
    void unregisteredTeam() throws Exception {
        testExpectedErrorMessage("relay_race/unregistered_team", () -> STR."invalid bib number '4' in file '\{getFileNameForPathProperty(KEY_RAW_RESULTS_PATH)}'");
    }

    @Test
    void duplicateTeamNumber() throws Exception {
        testExpectedErrorMessage("relay_race/duplicate_team_number", () -> STR."duplicate bib number '3' in file '\{getFileNameForPathProperty(KEY_ENTRIES_PATH)}'");
    }

    @Test
    void duplicateTeamName() throws Exception {
        testExpectedErrorMessage("relay_race/duplicate_team_name", () -> STR."duplicate entry 'Team 2' in file '\{getFileNameForPathProperty(KEY_ENTRIES_PATH)}'");
    }

    @Test
    void extraResult() throws Exception {
        testExpectedErrorMessage("relay_race/extra_result", () -> STR."surplus result for team '2' in file '\{getFileNameForPathProperty(KEY_RAW_RESULTS_PATH)}'");
    }

    @Test
    void illegalDNFTime() throws Exception {
        testExpectedErrorMessage("relay_race/illegal_dnf_time", () -> STR."invalid entry 'XXX' for key '\{KEY_DNF_FINISHERS}' in file '\{config_file_path.getFileName()}'");
    }

    @Test
    void illegalMassStartTime() throws Exception {
        testExpectedErrorMessage("relay_race/illegal_mass_start_time", () -> STR."invalid mass start time for key '\{KEY_MASS_START_ELAPSED_TIMES}' in file '\{config_file_path.getFileName()}'");
    }

    @Test
    void illegalRawTime() throws Exception {
        testExpectedErrorMessage("relay_race/illegal_raw_time", () -> STR."invalid record '3\tXXX' at line 13 in file '\{getFileNameForPathProperty(KEY_RAW_RESULTS_PATH)}'");
    }

    @Test
    void illegalMassStartTimeOrder() throws Exception {
        testExpectedErrorMessage("relay_race/illegal_mass_start_time_order", () -> STR."invalid mass start time order for key '\{KEY_MASS_START_ELAPSED_TIMES}' in file '\{config_file_path.getFileName()}'");
    }

    @Test
    void illegalCategory() throws Exception {
        testExpectedErrorMessage("relay_race/illegal_category", () -> STR."invalid entry '3 Team 3 Men Senior Jackbruce Martin King & Leland Donaldson Neil MacDonald & Myles  Christie Hubert Gray' at line 3 in file '\{getFileNameForPathProperty(KEY_ENTRIES_PATH)}'");
    }

    @Test
    void illegalTeamComposition() throws Exception {
        testExpectedErrorMessage("relay_race/illegal_team_composition", () -> STR."invalid entry '3\tTeam 3\tOS\tJackbruce\tNeil MacDonald & Myles  Christie\tHubert Gray' at line 3 in file '\{getFileNameForPathProperty(KEY_ENTRIES_PATH)}'");
    }

    @Test
    void switchedResult() throws Exception {
        testExpectedErrorMessage("relay_race/switched_result", () -> STR."surplus result for team '2' in file '\{getFileNameForPathProperty(KEY_RAW_RESULTS_PATH)}'");
    }

    @Test
    void resultsOutOfOrder() throws Exception {
        testExpectedErrorMessage("relay_race/results_out_of_order", () -> STR."result out of order at line 15 in file '\{getFileNameForPathProperty(KEY_RAW_RESULTS_PATH)}'");
    }
}
