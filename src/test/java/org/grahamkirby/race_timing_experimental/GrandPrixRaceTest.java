/*
 * race-timing - <https://github.com/grahamkirby/race-timing>
 * Copyright Â© 2025 Graham Kirby (race-timing@kirby-family.net)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.grahamkirby.race_timing_experimental;


import org.grahamkirby.race_timing.AbstractRaceTest;
import org.grahamkirby.race_timing_experimental.common.Race;
import org.grahamkirby.race_timing_experimental.series_race.GrandPrixRaceFactory;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

import java.io.IOException;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

public class GrandPrixRaceTest extends AbstractRaceTest {

    // TODO test duplicate bib number in individual raw results.

    // Synthetic names for most tests generated by:
    // https://www.fakenamegenerator.com/gen-random-gd-uk.php

    @Override
    protected void invokeMain(final String[] args) throws Exception {

        try {
            final Race tour_race = GrandPrixRaceFactory.makeGrandPrixRace(Path.of(args[0]));
            tour_race.processResults();
            tour_race.outputResults();

        } catch (final Exception e) {
            System.err.println(e.getMessage());
        }
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////

    private static List<String> getTestCases() throws IOException {

        List<String> test_cases = new ArrayList<>();

        test_cases.addAll(getTestCasesWithin("series_race/grand_prix"));
        test_cases.addAll(getTestCasesWithin("actual_races/series_race/grand_prix"));

        return test_cases;
    }

    @ParameterizedTest
    @MethodSource("getTestCases")
    void testFromDirectories(final String test_directory_path_string) throws Exception {

        testExpectedCompletionNew(test_directory_path_string);
    }
}
