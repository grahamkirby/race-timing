/*
 * race-timing - <https://github.com/grahamkirby/race-timing>
 * Copyright Â© 2025 Graham Kirby (graham.kirby@st-andrews.ac.uk)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.grahamkirby.race_timing;


import org.grahamkirby.race_timing.relay_race.RelayRace;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.FieldSource;

import java.util.List;
import java.util.function.Function;

import static org.grahamkirby.race_timing.individual_race.TimedRaceInput.KEY_ENTRIES_PATH;
import static org.grahamkirby.race_timing.individual_race.TimedRaceInput.KEY_RAW_RESULTS_PATH;
import static org.grahamkirby.race_timing.relay_race.RelayRace.*;
import static org.grahamkirby.race_timing.single_race.SingleRace.*;

public class RelayRaceTest extends AbstractRaceTest {

    // TODO test duplicate bib number in individual raw results.
    // TODO test missing property in config file.

    // Synthetic names for most tests generated by:
    // https://www.fakenamegenerator.com/gen-random-gd-uk.php

    private static final List<String> TESTS_EXPECTED_TO_COMPLETE = List.of(
        "relay_race/alternative_prize_reporting_order",
        "relay_race/dead_heats",
        "relay_race/guessed_missing_bib_numbers_a",
        "relay_race/guessed_missing_bib_numbers_b",
        "relay_race/html_output",
        "relay_race/individual_runner_start_time/leg_1",
        "relay_race/individual_runner_start_time/leg_3",
        "relay_race/interpolated_raw_times",
        "relay_race/last_few_results_not_recorded",
        "relay_race/legs_3",
        "relay_race/legs_5",
        "relay_race/mass_start_3_4/all_completed",
        "relay_race/mass_start_3_4/dnf_leg_1_2_3_4a",
        "relay_race/mass_start_3_4/dnf_leg_1_2_3_4b",
        "relay_race/mass_start_3_4/dnf_leg_1_2_3",
        "relay_race/mass_start_3_4/dnf_leg_1",
        "relay_race/mass_start_3_4/dnf_leg_2",
        "relay_race/mass_start_3_4/dnf_leg_3_4a",
        "relay_race/mass_start_3_4/dnf_leg_3_4b",
        "relay_race/mass_start_3_4/dnf_leg_3",
        "relay_race/mass_start_3_4/dnf_leg_4",
        "relay_race/mass_start_3_4/first_leg_finish_after_mass_start_3",
        "relay_race/mass_start_3_4/first_leg_finish_after_mass_start_4",
        "relay_race/mass_start_4/all_completed",
        "relay_race/mass_start_4/dnf_leg_1_2_3_4a",
        "relay_race/mass_start_4/dnf_leg_1_2_3_4b",
        "relay_race/mass_start_4/dnf_leg_1_2_3",
        "relay_race/mass_start_4/dnf_leg_1",
        "relay_race/mass_start_4/dnf_leg_2",
        "relay_race/mass_start_4/dnf_leg_3_4a",
        "relay_race/mass_start_4/dnf_leg_3_4b",
        "relay_race/mass_start_4/dnf_leg_3",
        "relay_race/mass_start_4/dnf_leg_4",
        "relay_race/mass_start_4/legs_swapped",
        "relay_race/mass_start_none/dnf_leg_1_2_3_4a",
        "relay_race/mass_start_none/dnf_leg_1_2_3_4b",
        "relay_race/mass_start_none/dnf_leg_1_2_3",
        "relay_race/mass_start_none/dnf_leg_1",
        "relay_race/mass_start_none/dnf_leg_2",
        "relay_race/mass_start_none/dnf_leg_3_4a",
        "relay_race/mass_start_none/dnf_leg_3_4b",
        "relay_race/mass_start_none/dnf_leg_3",
        "relay_race/mass_start_none/dnf_leg_4",
        "relay_race/prize_category_groups",
        "relay_race/simple",
        "relay_race/start_offset",
        "relay_race/team_name_includes_comma",
        "relay_race/top_two_results_women"
    );

    private static final Object[][] TESTS_EXPECTED_TO_GIVE_ERROR = new Object[][] {
        new Object[] {"race/missing_property_year", (Function<AbstractRaceTest, String>) race_test -> STR."no entry for key '\{KEY_YEAR}' in file '\{race_test.config_file_path.getFileName()}'"},
        new Object[] {"relay_race/duplicate_team_name", (Function<AbstractRaceTest, String>) race_test -> STR."duplicate entry 'Team 2' in file '\{race_test.getFileNameForPathProperty(KEY_ENTRIES_PATH)}'"},
        new Object[] {"relay_race/duplicate_team_number", (Function<AbstractRaceTest, String>) race_test -> STR."duplicate bib number '3' in file '\{race_test.getFileNameForPathProperty(KEY_ENTRIES_PATH)}'"},
        new Object[] {"relay_race/extra_result", (Function<AbstractRaceTest, String>) race_test -> STR."surplus result for team '2' in file '\{race_test.getFileNameForPathProperty(KEY_RAW_RESULTS_PATH)}'"},
        new Object[] {"relay_race/illegal_category", (Function<AbstractRaceTest, String>) race_test -> STR."invalid entry '3 Team 3 Men Senior Jackbruce Martin King & Leland Donaldson Neil MacDonald & Myles  Christie Hubert Gray' at line 3 in file '\{race_test.getFileNameForPathProperty(KEY_ENTRIES_PATH)}'"},
        new Object[] {"relay_race/illegal_dnf_time", (Function<AbstractRaceTest, String>) race_test -> STR."invalid entry 'XXX' for key '\{KEY_DNF_FINISHERS}' in file '\{race_test.config_file_path.getFileName()}'"},
        new Object[] {"relay_race/illegal_mass_start_time_order", (Function<AbstractRaceTest, String>) race_test -> STR."invalid mass start time order for key '\{KEY_MASS_START_ELAPSED_TIMES}' in file '\{race_test.config_file_path.getFileName()}'"},
        new Object[] {"relay_race/illegal_mass_start_time", (Function<AbstractRaceTest, String>) race_test -> STR."invalid mass start time for key '\{KEY_MASS_START_ELAPSED_TIMES}' in file '\{race_test.config_file_path.getFileName()}'"},
        new Object[] {"relay_race/illegal_raw_time", (Function<AbstractRaceTest, String>) race_test -> STR."invalid record '3\tXXX' at line 13 in file '\{race_test.getFileNameForPathProperty(KEY_RAW_RESULTS_PATH)}'"},
        new Object[] {"relay_race/illegal_team_composition", (Function<AbstractRaceTest, String>) race_test -> STR."invalid entry '3\tTeam 3\tOS\tJackbruce\tNeil MacDonald & Myles  Christie\tHubert Gray' at line 3 in file '\{race_test.getFileNameForPathProperty(KEY_ENTRIES_PATH)}'"},
        new Object[] {"relay_race/missing_property_number_of_legs", (Function<AbstractRaceTest, String>) race_test -> STR."no entry for key '\{KEY_NUMBER_OF_LEGS}' in file '\{race_test.config_file_path.getFileName()}'"},
        new Object[] {"relay_race/missing_property_paired_legs", (Function<AbstractRaceTest, String>) race_test -> STR."no entry for key '\{KEY_PAIRED_LEGS}' in file '\{race_test.config_file_path.getFileName()}'"},
        new Object[] {"relay_race/results_out_of_order_a", (Function<AbstractRaceTest, String>) race_test -> STR."result out of order at line 15 in file '\{race_test.getFileNameForPathProperty(KEY_RAW_RESULTS_PATH)}'"},
        new Object[] {"relay_race/results_out_of_order_b", (Function<AbstractRaceTest, String>) race_test -> STR."result out of order at line 16 in file '\{race_test.getFileNameForPathProperty(KEY_RAW_RESULTS_PATH)}'"},
        new Object[] {"relay_race/switched_result", (Function<AbstractRaceTest, String>) race_test -> STR."surplus result for team '2' in file '\{race_test.getFileNameForPathProperty(KEY_RAW_RESULTS_PATH)}'"},
        new Object[] {"relay_race/unregistered_team", (Function<AbstractRaceTest, String>) race_test -> STR."invalid bib number '4' in file '\{race_test.getFileNameForPathProperty(KEY_RAW_RESULTS_PATH)}'"},
    };

    @Override
    protected void invokeMain(final String[] args) throws Exception {
        RelayRace.main(args);
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////

    @ParameterizedTest
    @FieldSource("TESTS_EXPECTED_TO_COMPLETE")
    void expectedCompletion(final String test_directory_path) throws Exception {
        testExpectedCompletion(test_directory_path);
    }

    @ParameterizedTest
    @FieldSource("TESTS_EXPECTED_TO_GIVE_ERROR")
    void expectedError(final String test_directory_path, final Function<AbstractRaceTest, String> get_expected_error_message) throws Exception {
        testExpectedErrorMessage(test_directory_path, get_expected_error_message);
    }
}
